##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
	listen 443 ssl;
  listen [::]:443 ssl;

  ssl_certificate /etc/nginx/ssl/$DOMAIN_BLOG.crt;
  ssl_certificate_key /etc/nginx/ssl/$DOMAIN_BLOG.key;
  ssl_protocols TLSv1.2 TLSv1.3;

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	root /var/www/html/wp;

	# Add index.php to the list if you are using PHP
	index index.php index.html index.htm index.nginx-debian.html;

	server_name $DOMAIN_BLOG;

	location ~ [^/]\.php(/|$) {
	    fastcgi_split_path_info ^(.+?\.php)(/.*)$;
	    if (!-f $document_root$fastcgi_script_name) {
        return 404;
	    }

	    # Mitigate https://httpoxy.org/ vulnerabilities
	    fastcgi_param HTTP_PROXY "";

	    fastcgi_pass wordpress:9000;
	    fastcgi_index index.php;
      fastcgi_param SCRIPT_FILENAME $document_root/$fastcgi_script_name;

	    # include the fastcgi_param setting
	    include fastcgi_params;

	    # SCRIPT_FILENAME parameter is used for PHP FPM determining
	    #  the script name. If it is not set in fastcgi_params file,
	    # i.e. /etc/nginx/fastcgi_params or in the parent contexts,
	    # please comment off following line:
	    # fastcgi_param  SCRIPT_FILENAME   $document_root$fastcgi_script_name;
	}

  location /adminer/ {
    proxy_pass http://adminer:8080;
  }

	# pass PHP scripts to FastCGI server
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	#
	#	# With php-fpm (or other unix sockets):
	#	fastcgi_pass unix:/run/php/php7.4-fpm.sock;
	#	# With php-cgi (or other tcp sockets):
	#	fastcgi_pass 127.0.0.1:9000;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}

server {
	listen 443 ssl;
  listen [::]:443 ssl;

  ssl_certificate /etc/nginx/ssl/$DOMAIN_GALLERY.crt;
  ssl_certificate_key /etc/nginx/ssl/$DOMAIN_GALLERY.key;
  ssl_protocols TLSv1.2 TLSv1.3;

  server_name $DOMAIN_GALLERY;

  root /var/www/html/node/dist;

  location / {
    try_files $uri $uri/ /index.html;
  }
}

# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}
